// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// filterByBasin
DataFrame filterByBasin(DataFrame solutions, NumericVector basinLabels, NumericVector boudaries, int nBasins, int gridSize, int nDim);
RcppExport SEXP _ABSE_filterByBasin(SEXP solutionsSEXP, SEXP basinLabelsSEXP, SEXP boudariesSEXP, SEXP nBasinsSEXP, SEXP gridSizeSEXP, SEXP nDimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type solutions(solutionsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type basinLabels(basinLabelsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type boudaries(boudariesSEXP);
    Rcpp::traits::input_parameter< int >::type nBasins(nBasinsSEXP);
    Rcpp::traits::input_parameter< int >::type gridSize(gridSizeSEXP);
    Rcpp::traits::input_parameter< int >::type nDim(nDimSEXP);
    rcpp_result_gen = Rcpp::wrap(filterByBasin(solutions, basinLabels, boudaries, nBasins, gridSize, nDim));
    return rcpp_result_gen;
END_RCPP
}
// getBasinLabels
NumericVector getBasinLabels(List efficientSets, NumericVector gradients, int gridSize, int nDim);
RcppExport SEXP _ABSE_getBasinLabels(SEXP efficientSetsSEXP, SEXP gradientsSEXP, SEXP gridSizeSEXP, SEXP nDimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type efficientSets(efficientSetsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gradients(gradientsSEXP);
    Rcpp::traits::input_parameter< int >::type gridSize(gridSizeSEXP);
    Rcpp::traits::input_parameter< int >::type nDim(nDimSEXP);
    rcpp_result_gen = Rcpp::wrap(getBasinLabels(efficientSets, gradients, gridSize, nDim));
    return rcpp_result_gen;
END_RCPP
}
// getEfficientSets
List getEfficientSets(NumericVector efficientPoints, int gridSize, int nDim, bool domSort, NumericVector rank, int nRank);
RcppExport SEXP _ABSE_getEfficientSets(SEXP efficientPointsSEXP, SEXP gridSizeSEXP, SEXP nDimSEXP, SEXP domSortSEXP, SEXP rankSEXP, SEXP nRankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type efficientPoints(efficientPointsSEXP);
    Rcpp::traits::input_parameter< int >::type gridSize(gridSizeSEXP);
    Rcpp::traits::input_parameter< int >::type nDim(nDimSEXP);
    Rcpp::traits::input_parameter< bool >::type domSort(domSortSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< int >::type nRank(nRankSEXP);
    rcpp_result_gen = Rcpp::wrap(getEfficientSets(efficientPoints, gridSize, nDim, domSort, rank, nRank));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ABSE_filterByBasin", (DL_FUNC) &_ABSE_filterByBasin, 6},
    {"_ABSE_getBasinLabels", (DL_FUNC) &_ABSE_getBasinLabels, 4},
    {"_ABSE_getEfficientSets", (DL_FUNC) &_ABSE_getEfficientSets, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_ABSE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
